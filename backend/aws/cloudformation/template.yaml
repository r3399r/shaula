AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: shaula deployment cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters: 
  NodeJsVer:
    Type: String
    Default: nodejs14.x
  Project:
    Type: String
  TargetEnvr:
    Type: String
    Description: The target environment for API Gateway deployment.
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub ${Project}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ##############################################
  ##### API Gateway and associated Lambdas #####
  ##############################################
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${TargetEnvr}
      EndpointConfiguration: REGIONAL
      DefinitionBody: {
          "openapi": "3.0.1",
          "info": {
            "version": "2020-01-06T07:45:41Z",
            "title": !Sub "${Project}-${TargetEnvr}-api"
          },
          "paths": {
            "/api/chat": {
              "post": {
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:734162845687:function:${Project}-${TargetEnvr}-chat/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws"
                }
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            }
          },
          "x-amazon-apigateway-request-validators" : {
            "Validate body, query string parameters, and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : true
            },
            "Validate query string parameters and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : false
            }
          }
        }
  LambdaChat:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.chat
      Runtime: !Sub ${NodeJsVer}
      FunctionName: !Sub ${Project}-${TargetEnvr}-chat
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          TOKEN_LINE: TBD
          TOKEN_DISCORD: TBD
          TOKEN_TELEGRAM: TBD
          SRC_LINE_GROUP_ID: TBD
          SRC_LINE_USER_ID: TBD
          DST_LINE_GROUP_ID: TBD
          DST_DISCORD_CHANNEL_ID: TBD
          DST_TELEGRAM_CHAT_ID: TBD
  InvokePermissionChat:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaChat]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-chat
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  ####################################
  ##### S3 Bucket and its policy #####
  ####################################
  S3BucketStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${TargetEnvr}
      LifecycleConfiguration:
        Rules:
        - Id: cleanup
          Status: Enabled
          ExpirationInDays: 1
          NoncurrentVersionExpiration:
            NoncurrentDays: 1